"""This script generates a Jacoco like HTML report from the coverage JSON report generated by the coverage tool."""

import json

# Load the coverage JSON report
with open("coverage_reports/coverage.json") as f:
    coverage_data = json.load(f)

# Prepare data for the table
data = []

total_line_coverage = (
    coverage_data["totals"]["covered_lines"]
    / coverage_data["totals"]["num_statements"]
    * 100
    if coverage_data["totals"]["num_statements"] > 0
    else 100
)
total_branch_coverage = (
    coverage_data["totals"]["covered_branches"]
    / coverage_data["totals"]["num_branches"]
    * 100
    if coverage_data["totals"]["num_branches"] > 0
    else 100
)

data.append(
    {
        "File": len(coverage_data['files']),
        "Line Coverage": f'{coverage_data["totals"]["covered_lines"]}/{coverage_data["totals"]["num_statements"]} ({total_line_coverage:.2f}%)',
        "Branch Coverage": f'{coverage_data["totals"]["covered_branches"]}/{coverage_data["totals"]["num_branches"]} ({total_branch_coverage:.2f}%)',
    }
)

# Iterate through each file in the report
for filename, file_report in coverage_data["files"].items():
    # Calculate line and branch coverage percentages
    line_coverage = (
        file_report["summary"]["covered_lines"]
        / file_report["summary"]["num_statements"]
        * 100
        if file_report["summary"]["num_statements"] > 0
        else 100
    )
    branch_coverage = (
        file_report["summary"]["covered_branches"]
        / file_report["summary"]["num_branches"]
        * 100
        if file_report["summary"]["num_branches"] > 0
        else 100
    )

    # Append the data
    data.append(
        {
            "File": filename,
            "Line Coverage": f'{file_report["summary"]["covered_lines"]}/{file_report["summary"]["num_statements"]} ({line_coverage:.2f}%)',
            "Branch Coverage": f'{file_report["summary"]["covered_branches"]}/{file_report["summary"]["num_branches"]} ({branch_coverage:.2f}%)',
        }
    )


def add_row_html(row, html_template):
    """
    Add a row to the HTML template.

    Args:
        row (dict): The row data.
        html_template (str): The HTML template.

    Returns:
        str: The updated HTML template.
    """
    line_coverage_percentage = float(row["Line Coverage"].split("(")[1].split("%")[0])
    branch_coverage_percentage = float(
        row["Branch Coverage"].split("(")[1].split("%")[0]
    )

    html_template += f"""
        <tr>
            <td style="padding-right: 20px;">{row['File']}</td> <!-- Add padding to the right -->
            <td style="padding-right: 20px;"> <!-- Add padding to the right -->
                <div style="width: 100%; display: flex; justify-content: space-between;">
                    <div style="text-align: left;">{row['Line Coverage'].split(' ')[1]}</div> <!-- Counts right-aligned -->
                    <div style="width: 200px; height: 20px; background-color: #f3f3f3; border-radius: 3px; display: inline-flex; position: relative;">
                        <div style="flex: {line_coverage_percentage}; background-color: #4caf50;"></div>
                        <div style="flex: {100 - line_coverage_percentage}; background-color: #f44336;"></div>
                        <div style="position: absolute; width: 100%; text-align: center;">{row['Line Coverage'].split(' ')[0]}</div> <!-- Percentages inside the progress bar -->
                    </div>
                </div>
            </td>
            <td>
                <div style="width: 100%; display: flex; justify-content: space-between;">
                    <div style="text-align: left;">{row['Branch Coverage'].split(' ')[1]}</div> <!-- Counts right-aligned -->
                    <div style="width: 200px; height: 20px; background-color: #f3f3f3; border-radius: 3px; display: inline-flex; position: relative;">
                        <div style="flex: {branch_coverage_percentage}; background-color: #4caf50;"></div>
                        <div style="flex: {100 - branch_coverage_percentage}; background-color: #f44336;"></div>
                        <div style="position: absolute; width: 100%; text-align: center;">{row['Branch Coverage'].split(' ')[0]}</div> <!-- Percentages inside the progress bar -->
                    </div>
                </div>
            </td>
        </tr>
    """
    return html_template


# HTML template that resembles the JaCoCo layout
html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coverage Report</title>
</head>
<body>
    <h1>Coverage Report</h1>
    <table>
        <tr>
            <th>Number of Files</th>
            <th>Line Coverage</th>
            <th>Branch Coverage</th>
        </tr>
"""

html_template = add_row_html(data[0], html_template)

html_template += """
    </table>
    <h2>File Coverage</h2>
    <table>
        <tr>
            <th>File</th>
            <th>Line Coverage</th>
            <th>Branch Coverage</th>
        </tr>
"""

# Add the data to the HTML template
# skip the first row as it is the total coverage
for row in data[1:]:
    html_template = add_row_html(row, html_template)

# Close the HTML tags
html_template += """
    </table>
</body>
</html>
"""

# Save the HTML report to a file
with open("coverage_reports/coverage_report.html", "w") as f:
    f.write(html_template)
