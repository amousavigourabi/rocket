"""This script generates a Jacoco like HTML report from the coverage JSON report generated by the coverage tool."""

import json

with open("coverage_reports/coverage.json") as f:
    coverage_data = json.load(f)

data = []


def add_row_data(col1: str, summary: dict) -> None:
    """
    Add a row to the data list.

    Args:
        col1 (str): The first column data.
        summary (dict): The summary data.
    """
    line_coverage = (
        int(summary["covered_lines"] / summary["num_statements"] * 100)
        if summary["num_statements"] > 0
        else 100
    )
    branch_coverage = (
        int(summary["covered_branches"] / summary["num_branches"] * 100)
        if summary["num_branches"] > 0
        else 100
    )

    data.append(
        {
            "File": col1,
            "Line Coverage Count": f'{summary["covered_lines"]}/{summary["num_statements"]}',
            "Line Coverage Percentage": line_coverage,
            "Branch Coverage Count": f'{summary["covered_branches"]}/{summary["num_branches"]}',
            "Branch Coverage Percentage": branch_coverage,
        }
    )


add_row_data(str(len(coverage_data["files"])), coverage_data["totals"])

# Iterate through each file in the report
for filename, file_report in coverage_data["files"].items():
    add_row_data(filename, file_report["summary"])


def add_coverage_column_html(percentage: int, count: str, html_template: str) -> str:
    """
    Add the HTML for a coverage column that consists of percentage and a progressbar with a count inside it.

    Args:
        percentage (int): The coverage percentage.
        count (str): The coverage count in format x/x.
        html_template (str): The HTML template.

    Returns:
        str: The updated HTML template.
    """
    html_template += f"""
            <td>
                <div class="coverage-col">
                    <div style="padding-right: 5px;">({percentage}%)</div> <!-- Percentages in front -->
                    <div class="coverage-bar">
                        <div style="flex: {percentage};" class="covered"></div>
                        <div style="flex: {100 - percentage};" class="uncovered"></div>
                        <div class="counts">{count}</div> <!-- Counts inside the progress bar -->
                    </div>
                </div>
            </td>
    """
    return html_template


def add_row_html(row_data: dict) -> str:
    """
    Add a row to the HTML template that consists of a filename, line coverage data and branch coverage data.

    Args:
        row_data (dict): The row data.
        html_template (str): The HTML template.

    Returns:
        str: The updated HTML template.
    """
    summary_row = f"""
        <tr>
            <td>{row_data['File']}</td>
    """
    summary_row = add_coverage_column_html(
        row_data["Line Coverage Percentage"],
        row_data["Line Coverage Count"],
        summary_row,
    )
    summary_row = add_coverage_column_html(
        row_data["Branch Coverage Percentage"],
        row_data["Branch Coverage Count"],
        summary_row,
    )

    summary_row += """
        </tr>
    """

    return summary_row


def generate_total_html(total_data: dict) -> str:
    """
    Generate the HTML for the total coverage data.

    Args:
        total_data (dict): The total coverage data.

    Returns:
        str: The HTML for the total coverage data.
    """
    total_html = add_row_html(total_data)
    return total_html


def generate_files_html(files_data: list[dict]) -> str:
    """
    Generate the HTML for the files coverage data.

    Args:
        files_data (list): The list of files coverage data.

    Returns:
        str: The HTML for the files coverage data.
    """
    files_html = [add_row_html(row) for row in files_data]
    return "".join(files_html)


# Generate the HTML for the placeholders in the template
total_html = generate_total_html(data[0])
files_html = generate_files_html(data[1:])

with open("coverage_reports/coverage_report_template.html") as f:
    html_template = f.read()

# Use the str.format() function to replace the placeholders with the generated HTML
html_template = html_template.format(
    total_coverage=total_html, files_coverage=files_html
)

with open("coverage_reports/coverage_report.html", "w") as f:
    f.write(html_template)
